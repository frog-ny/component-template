class HTMLBaseElement extends HTMLElement{constructor(...t){const e=super(...t);return e.parsed=!1,e.parentNodes=[],e}setup(){let t=this;for(;t.parentNode;)t=t.parentNode,this.parentNodes.push(t);"loading"!==document.readyState?this.childrenAvailableCallback():(this.mutationObserver=new MutationObserver(()=>{([this,...this.parentNodes].some(t=>t.nextSibling)||"loading"!==document.readyState)&&(this.childrenAvailableCallback(),this.mutationObserver.disconnect())}),this.mutationObserver.observe(this,{childList:!0}))}}class Foo extends HTMLElement{static get observedAttributes(){return["value"]}constructor(){super(),this.increment=this.increment.bind(this)}connectedCallback(){this.addEventListener("click",this.increment),this.hasAttribute("value")||this.setAttribute("value",0),this.innerHTML="\n      <div class='counter-wrapper'>\n        <button class='counter-button' tabindex='0' increment>Increment</button>\n        <span class='counter-count'></span>\n      </div>\n    ",this.incrementBtn=this.querySelector("[increment]"),this.displayVal=this.querySelector("span"),this.displayVal.innerText=this.value}attributeChangedCallback(t,e,s){void 0!==this.displayVal&&(this.displayVal.innerText=this.value)}disconnectedCallback(){this.removeEventListener("click",this.increment)}increment(){const t=+this.step||1,e=+this.value+t;this.value=+e}get value(){return this.getAttribute("value")}get step(){return this.getAttribute("step")}set value(t){this.setAttribute("value",t)}set step(t){this.setAttribute("step",t)}}customElements.define("exa-foo",Foo);